
            High Level Design Sketch of Flat Filesystem
            -------------------------------------------

Let the filesystem block size be 4K.
Let the vdisk size is 2GB.
Therefore, the total number of 4K blocks on vdisk = 2*2^30/2^12 = 2^19 = 524288.

1) vdisk layout:
----------------
Assume data blocks are numbered from 0 through 524287. Then, layout of vdisk
as follows:

1) Superblock:
   block 0 reserved for super block. For simplicity reasons, we store
   minimal info as below.

struct SuperBlock {
    uint numOfInodes;     // Total number of inodes in the filesystem
    uint numOfDataBlocks; // Total data blocks in the file system
    uint iTableLoc;       // Inode table location. This is CRUCIAL PIECE.
    char magic[4];        // IDLI. Just a fancy magic string.
    uint inodeBitMapLoc;  // inode bitmap location.
    uint dataBlocksBitMap;// data block bitmap location.
};

2) inode bitmap:
   Inode bitmap is to track allocated and available inodes. Since we limit max files
   supported to 1024 (details below), we need 1024 bits. Wth integer word size
   of 32, we need 32 buckets. The size to store the bitmap should
   1024bits/8 = 128 bytes. For simplicity, we reserve one entire block for this.

   block 1 is reserved for this.

3) data block bit map:
   Data block bit map is to track allocated and available data blocks. Since we support
   1024 files and each file needs 251 data blocks, we need to track 256K blocks.
   Since we need 256K bits or 32KB, once again for simplicity reasons, we reserve one
   block for this as well.

   block 2 is reserved for this.

4) inode table : block 3 through 258 (in total 256 blocks) is reserved
   for Inode table. See the below Inode structure. In each block, we can store
   four Inodes. In 256 blocks we can store 256*4 = 1024 Inodes. Therefore, the
   maximum number of files supported in the filesystem is 1024.

   For simplicity, data block numbers allocated for a file are
   stored in array. Array size is chosen so as sizeof(Inode) aligns with
   multiples of 4K - for example, after choosing array of length 251,
   the sizeof(Inode) = 1024 byes (which is multiple of 4K), so four
   inodes can fit in one 4K size block. 
   Since maximum data blocks per Inode is 251, the max file supported 251*4K=1004KB=~1MB.

/* inode structure */
class Inode {
public:
    char fname[8];        // file name - 8 chars max.
    uint inum;            // inode number
    uint numOfDataBlocks; // number of data blocks allocated for a file
    uint fileSize;        // real file size. Sparse files not supported
    uint dataBlocks[251];
};

    The key point to note here:
      -> max files supported 1024;
      -> max file size is approx 1MB.
    This is for simplicity purposes and to demonstrate the actual goal of the exercise.

5) data blocks 259 through 524287 reserved for actual user data. Albeit, we will
   be using only 262144 for our purpose.


                        Workflow
                        --------

Up on starting the program, it creats a file "myfs" under current working dir with file
if 2GB formatted with all zeros. If the filesystem already exists, it loads all the meta
 - inode bit map;
 - data bit map;
It also populates few other helpful data structures.


Create call: For a given file name, it creates inode entry in inode table. Inode
bit map is updated to indicate the inode taken. Stores the file name in on disk inode
structure. And returns inum (you can treat this as fd).

Write call: For each write call, it allocates a data block, updates data block bit map
with the taken block num, and writes data into that block. The inprogress meta (file length etc)
cached in memory for perfomance reasons. During the file close, this meta data will be
flushed to disk thus avoiding the disk access penality.

IMP NOTE: There is a design trade of in delaying meta data updates to disk until close call.
If data correctness/consistency is super important, then, meta data needs to be updated after
every write call. 

Read call: Given a file name, it finds the inum. From the inum, it populates, file length,
data blocks. Then, it reads the data from each of the data block.

Delete call: Populates filename, inumber and all the data blocks. Then releases all these.
and updates the meta.

I also provided API to list all files.
